import os
import json
import asyncio
import random
import string
import logging
import time
from datetime import datetime
from pathlib import Path
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.types import (
    FSInputFile,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    KeyboardButton,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove
)
from aiogram.enums import ParseMode
from aiogram.filters import Command, StateFilter
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
ADMIN_ID = int(os.getenv('ADMIN_ID'))

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–Ω—é
CATEGORIES = {
    "breakfast": "–ó–∞–≤—Ç—Ä–∞–∫ üç≥",
    "lunchdinner": "–û–±–µ–¥ –∏ —É–∂–∏–Ω ü•ò",
    "drinks": "–ù–∞–ø–∏—Ç–∫–∏ ü•§",
    "outdoor": "–í–Ω–µ –¥–æ–º–∞ ü•©",
    "delivery": "–ó–∞–∫–∞–∑–∞—Ç—å –¥–æ–º–æ–π üç±",
    "guests": "–ü–æ–∂—Ä–∞—Ç—å –≤ –≥–æ—Å—Ç—è—Öüçï",
    "compote": "–ö–∞–∫ –∫–æ–º–ø–æ—Ç–∏–∫üçπ",
    "bichis": "–ö–∞–∫ –±–∏—á–∏ ü¶¥",
    "banquet": "–ë–∞–Ω–∫–µ—Ç (–¥–ª—è –≥–æ—Å—Ç–µ–π) üëª"
}

# –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
UNEDITABLE_CATEGORIES = ['outdoor', 'delivery', 'guests', 'compote', 'bichis', 'banquet']

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
BASE_DIR = Path(__file__).parent
DATA_DIR = BASE_DIR / 'data'
PHOTOS_DIR = DATA_DIR / 'photos'

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä ID –∑–∞–∫–∞–∑–∞
def generate_order_id():
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–ø–æ–∫
def init_folders():
    try:
        os.makedirs(PHOTOS_DIR, exist_ok=True)
        for file in ['menu.json', 'orders.json', 'active_orders.json']:
            if not (DATA_DIR / file).exists():
                with open(DATA_DIR / file, 'w') as f:
                    json.dump({}, f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞–ø–æ–∫: {e}")

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class MenuStates(StatesGroup):
    main_menu = State()
    categories = State()
    category_items = State()
    view_item = State()
    my_order = State()
    edit_order = State()
    admin_panel = State()
    banquet_guests = State()
    banquet_level = State()

class AdminStates(StatesGroup):
    add_category = State()
    add_item_name = State()
    add_item_desc = State()
    add_item_price = State()
    add_item_photo = State()
    delete_item = State()

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
def load_db():
    init_folders()
    try:
        with open(DATA_DIR / 'menu.json', 'r') as f:
            menu = json.load(f)
            for cat in CATEGORIES:
                if cat not in menu:
                    menu[cat] = {}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ menu.json: {e}")
        menu = {cat: {} for cat in CATEGORIES}
    
    try:
        with open(DATA_DIR / 'orders.json', 'r') as f:
            orders = json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ orders.json: {e}")
        orders = {}
    
    try:
        with open(DATA_DIR / 'active_orders.json', 'r') as f:
            active_orders = json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ active_orders.json: {e}")
        active_orders = {}
    
    return menu, orders, active_orders

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def save_db(menu, orders, active_orders):
    try:
        with open(DATA_DIR / 'menu.json', 'w') as f:
            json.dump(menu, f, indent=2)
        with open(DATA_DIR / 'orders.json', 'w') as f:
            json.dump(orders, f, indent=2)
        with open(DATA_DIR / 'active_orders.json', 'w') as f:
            json.dump(active_orders, f, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

menu, orders, active_orders = load_db()

# ====================== –û–°–ù–û–í–ù–´–ï –•–ï–ù–î–õ–ï–†–´ ======================

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    if message.from_user.id == ADMIN_ID:
        await admin_panel(message, state)
    else:
        await show_user_menu(message)

async def show_user_menu(message: types.Message):
    welcome_text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞—Ñ–µ ¬´–ö–∞—Ü—É–ª—å–∫–∞¬ª üíó\n"
        "\n"
        "–í –Ω–∞—à–µ–º –∑–∞–≤–µ–¥–µ–Ω–∏–∏ –ø–æ–¥–∞—é—Ç —Ç–æ–ª—å–∫–æ –≥–æ—Ä—è—á–∏–µ –±–ª—é–¥–∞, –∫–∞–∫ –∏ –í—ã üî•\n"
        "\n"
        "–ì–ª–∞–≤–Ω—ã–π —à–µ—Ñ-–ø–æ–≤–∞—Ä –∏ –ø–æ —Å–æ–≤–º–µ—Å—Ç–∏—Ç–µ–ª—å—Å—Ç–≤—É –≤–ª–∞–¥–µ–ª–∏—Ü–∞ –∫–∞—Ñ–µ - –∑–∞–ú–£–†–†–†—á–∞—Ç–µ–ª—å–Ω–∞—è –í–∏–∫—Ç–æ—Ä–∏—è üíó\n"
        "\n"
        "–ó–∞—Ä–∞–Ω–µ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º, –æ–ø–ª–∞—Ç–∞ —É –Ω–∞—Å –Ω–µ–æ–±—ã—á–Ω–∞—è, –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞ ü´∂üèª"
    )
    
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="üçΩ –ú–µ–Ω—é",
        callback_data="categories"
    ))
    
    await message.answer(welcome_text, reply_markup=builder.as_markup())

# ====================== –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ ======================

@dp.callback_query(F.data == "categories")
async def show_categories(call: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    for cat_id, cat_name in CATEGORIES.items():
        builder.add(types.InlineKeyboardButton(
            text=cat_name,
            callback_data=f"category_{cat_id}"
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ú–æ–π –∑–∞–∫–∞–∑" –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä—è–¥
    builder.row(
        types.InlineKeyboardButton(
            text="üõí –ú–æ–π –∑–∞–∫–∞–∑",
            callback_data="my_order"
        )
    )
    
    builder.adjust(2)  # –†–∞–∑–º–µ—â–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ 2 –≤ —Ä—è–¥
    
    try:
        await call.message.edit_text(
            "üçΩ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=builder.as_markup()
        )
    except Exception:
        await call.message.answer(
            "üçΩ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=builder.as_markup()
        )

@dp.callback_query(F.data.startswith('category_'))
async def show_category_items(call: types.CallbackQuery):
    await call.answer()
    try:
        cat_id = call.data.split('_')[1]
        
        if cat_id in UNEDITABLE_CATEGORIES:
            await handle_special_category(call, cat_id)
            return
            
        cat_name = CATEGORIES[cat_id]
        category_menu = menu.get(cat_id, {})
        
        if not category_menu:
            await call.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–π")
            return
        
        builder = InlineKeyboardBuilder()
        for item_id, item in category_menu.items():
            builder.add(types.InlineKeyboardButton(
                text=item['name'],
                callback_data=f"item_{cat_id}_{item_id}"
            ))
        builder.adjust(2)
        
        builder.row(
            types.InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data="categories"
            ),
            types.InlineKeyboardButton(
                text="üõí –ú–æ–π –∑–∞–∫–∞–∑",
                callback_data="my_order"
            )
        )
        
        await call.message.edit_text(
            f"üçΩ {cat_name}:",
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await call.message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

async def handle_special_category(call: types.CallbackQuery, category: str):
    try:
        if category == 'outdoor':
            text = (
                "–î–æ—Ä–æ–≥–æ–π –¥–Ω–µ–≤–Ω–∏–∫!\n"
                "–ú–Ω–µ –Ω–µ –æ–ø–∏—Å–∞—Ç—å —ç—Ç—É –±–æ–ª—å‚Ä¶.–¥–∞ –∫–æ–≥–æ —è –æ–±–º–∞–Ω—ã–≤–∞—é?\n"
                "–ï–¥–µ–º!\n"
                "–Ø –ø–æ–∫–∞ –º–µ–Ω—è—é —Ñ–∞—Ä—Ç—É–∫ –Ω–∞ –Ω–∞—Ä—è–¥, —Ç—ã –ø–æ–¥—ã—Å–∫–∏–≤–∞–π –º–µ—Å—Ç–æ üòç\n"
                "–û–ø–ª–∞—Ç–∞: –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –æ—Ç —à–µ—Ñ-–ø–æ–≤–∞—Ä–∞ - 1 —Å—Ç—Ä–∞—Å—Ç–Ω—ã–π –ø–æ—Ü–µ–ª—É–π –∏ –ª—é–±–æ–µ –∂–µ–ª–∞–Ω–∏–µ hot üî•üîû"
            )
            photo_path = str(PHOTOS_DIR / 'outdoor.jpg')
    
            builder = InlineKeyboardBuilder()
            builder.add(types.InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data="categories"
            ))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await call.message.answer_photo(
                FSInputFile(photo_path),
                caption=text,
                reply_markup=builder.as_markup()
            )
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É —Å –∫–Ω–æ–ø–∫–æ–π
            if ADMIN_ID:
                admin_builder = InlineKeyboardBuilder()
                admin_builder.add(types.InlineKeyboardButton(
                    text="üü¢ –ü–æ–≥–Ω–∞–ª–∏!",
                    callback_data=f"outdoor_confirm_{call.from_user.id}"
                ))
        
                await bot.send_message(
                    ADMIN_ID,
                    f"üçΩ –ö—Ç–æ-—Ç–æ —Ö–æ—á–µ—Ç –ø–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º!\n",
                    reply_markup=admin_builder.as_markup()
                )

            
        elif category == 'delivery':
            text = (
                "–ú–º–º, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —Ç–æ, —á—Ç–æ –≤—ã —Ä–µ—à–∏–ª–∏ –¥–∞—Ç—å –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –∑–∞–ú–£–†–†–†—á–∞—Ç–µ–ª—å–Ω–æ–º—É –ø–æ–≤–∞—Ä—É, "
                "–í—ã –≤—Å–µ —Ä–∞–≤–Ω–æ –ª—é–±–∏–º–∞—è –∂–æ–ø–∞ üòè"
            )
            
            builder = InlineKeyboardBuilder()
            builder.add(types.InlineKeyboardButton(
                text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
                callback_data="delivery_continue"
            ))
            
            await call.message.answer(text, reply_markup=builder.as_markup())
            
        elif category == 'guests':
            text = "–î–æ—Ä–æ–≥–æ–π –õ—é–±–∏–º–∫–∞, —Ç—ã —Ä–µ—à–∏–ª –Ω–∞–µ–±–∞—Ç—å —Å–∏—Å—Ç–µ–º—É üòà"
            
            builder = InlineKeyboardBuilder()
            builder.add(types.InlineKeyboardButton(
                text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
                callback_data="guests_continue"
            ))
            
            await call.message.answer(text, reply_markup=builder.as_markup())
            
        elif category == 'compote':
            text = (
                "–î–∞–≤–∞–π –Ω–∞—Ö—É—è—Ä–∏–º—Å—è!\n"
                "–í—ã–±–∏—Ä–∞–π –Ω–∞—Å—Ç–æ–∏—á–Ω—É—é –∏–ª–∏ –±–∞—Ä –∏ –ø–æ–≥–Ω–∞–ª–∏ –≤ –µ–±–µ—Ç–∞ üöÄ"
            )
            photo_path = str(PHOTOS_DIR / 'compote.jpg')
            
            builder = InlineKeyboardBuilder()
            builder.add(types.InlineKeyboardButton(
                text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
                callback_data="compote_continue"
            ))
            
            await call.message.answer_photo(
                FSInputFile(photo_path),
                caption=text,
                reply_markup=builder.as_markup()
            )
            
        elif category == 'bichis':
            text = "–ù—É —á—Ç–æ, —Å–ª–∞–¥–∫–∏–π –º–æ–π, –ø–æ –¥–æ—à–∏–∫—É –∏–ª–∏ —à–∞–≤—É—Ö–µ?üòµ‚Äçüí´"
            
            builder = InlineKeyboardBuilder()
            builder.add(types.InlineKeyboardButton(
                text="–®–∞–≤—É—Ö–∞",
                callback_data="bichis_shawarma"
            ))
            builder.add(types.InlineKeyboardButton(
                text="–î–æ—à–∏–∫",
                callback_data="bichis_doshik"
            ))
            
            await call.message.answer(text, reply_markup=builder.as_markup())
            
        elif category == 'banquet':
            text = "–û—Ç–ª–∏—á–Ω–æ, –ª—é–±–∏–º—ã–π, –≥–æ—Ç–æ–≤–∏–º—Å—è –∫ –ø—Ä–∏–µ–º—É –≥–æ—Å—Ç–µ–πüòà"
            
            builder = InlineKeyboardBuilder()
            builder.add(types.InlineKeyboardButton(
                text="–î–∞–ª–µ–µ",
                callback_data="banquet_continue"
            ))
            
            await call.message.answer(text, reply_markup=builder.as_markup())
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await call.message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

@dp.callback_query(F.data == "delivery_continue")
async def delivery_continue_handler(call: types.CallbackQuery):
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –≤–æ–ø—Ä–æ—Å–æ–º
        photo_path = str(PHOTOS_DIR / 'delivery.jpg')
        
        builder = InlineKeyboardBuilder()
        builder.row(
            types.InlineKeyboardButton(text="üü°", callback_data="delivery_yellow"),
            types.InlineKeyboardButton(text="üü¢", callback_data="delivery_green")
        )
        
        await call.message.answer_photo(
            FSInputFile(photo_path),
            caption="–ö–∞–∫ –¥—É–º–∞–µ—Ç–µ, –∫—Ç–æ –ø–æ–±–µ–¥–∏—Ç –≤ —ç—Ç–æ–π —Å—Ö–≤–∞—Ç–∫–µ?",
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ delivery_continue: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

@dp.callback_query(F.data.startswith("delivery_") & ~F.data.startswith("delivery_confirm_"))
async def delivery_final(call: types.CallbackQuery):
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await call.message.answer_photo(
            FSInputFile(PHOTOS_DIR / 'nedoljno.jpg'),
            caption="–û–ø–ª–∞—Ç–∞: –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –æ—Ç —à–µ—Ñ-–ø–æ–≤–∞—Ä–∞ - 10 —á–º–æ–∫–æ–≤ –∏ –º–∏–Ω–µ—Ç–∏–∫ üëÑüîû",
            reply_markup=InlineKeyboardBuilder()
                .button(text="üçΩ –í –º–µ–Ω—é", callback_data="categories")
                .as_markup()
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É —Å –∫–Ω–æ–ø–∫–æ–π
        if ADMIN_ID:
            builder = InlineKeyboardBuilder()
            builder.add(types.InlineKeyboardButton(
                text="üü¢ –û—Ç–ª–∏—á–Ω–æ!",
                callback_data=f"delivery_confirm_{call.from_user.id}"
            ))
            
            await bot.send_message(
                ADMIN_ID,
                f"üöö –ö—Ç–æ-—Ç–æ —Ö–æ—á–µ—Ç –¥–æ—Å—Ç–∞–≤–∫—É!\n",
                reply_markup=builder.as_markup()
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ delivery_final: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")

@dp.callback_query(F.data == "guests_continue")
async def guests_continue_handler(call: types.CallbackQuery):
    try:
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É (–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å—Ä–∞–∑—É)
        if ADMIN_ID:
            await bot.send_message(
                ADMIN_ID,
                f"üçï –ö—Ç–æ-—Ç–æ —Ö–æ—á–µ—Ç –≤ –≥–æ—Å—Ç—è—Ö –ø–æ–∂—Ä–∞—Ç—å!\n"
                f"User: @{call.from_user.username or call.from_user.full_name}"
            )

        # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await call.message.answer_photo(
            FSInputFile(PHOTOS_DIR / 'guests.jpg'),
            caption="–õ—é–±–æ–π –∏–∑ –¥—Ä—É–∑–µ–π, –∫–æ–≥–æ —Ç—ã –≤—ã–±–µ—Ä–µ—à—å"
        )
        
        await asyncio.sleep(3)
        msg = await call.message.answer_photo(
            FSInputFile(PHOTOS_DIR / 'guests_reality.jpg'),
            caption="–ü–æ—ç—Ç–æ–º—É –±—É–¥–µ—Ç —Ç–∞–∫"
        )
        
        await asyncio.sleep(3)
        await msg.reply(
            "–¢–∞–∫ —á—Ç–æ, —Ö–∏—Ç—Ä–æ–∂–æ–ø—ã–π –∫–æ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –≤ –º–µ–Ω—é ü•≤\n"
            "–û–ø–ª–∞—Ç–∞: 100 —Ä—É–±–ª–µ–π –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ü§£üñïüèª",
            reply_markup=InlineKeyboardBuilder()
                .button(text="üçΩ –í –º–µ–Ω—é", callback_data="categories")
                .as_markup()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ guests_continue: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")

@dp.callback_query(F.data == "compote_continue")
async def compote_handler(call: types.CallbackQuery):
    try:
        # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        await call.message.edit_reply_markup(reply_markup=None)
        
        # –ñ–¥–µ–º 4 —Å–µ–∫—É–Ω–¥—ã
        await asyncio.sleep(2)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await call.message.answer_photo(
            FSInputFile(PHOTOS_DIR / 'nubla.jpg'),
            caption="–û–ø–ª–∞—Ç–∞: –≥—Ä–æ–º–∫–∏–π –ø—Ä–æ—Ç—è–∂–µ–Ω–Ω—ã–π –∫—Ä–∏–∫ ¬´–ù—É –±–ª—è—è—è—è!¬ª ü´®",
            reply_markup=InlineKeyboardBuilder()
                .button(text="üçΩ –í –º–µ–Ω—é", callback_data="categories")
                .as_markup()
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É —Å –∫–Ω–æ–ø–∫–æ–π
        if ADMIN_ID:
            builder = InlineKeyboardBuilder()
            builder.add(types.InlineKeyboardButton(
                text="üçª –î–∞–≤–∞–π –Ω–∞—Ö—É—è—Ä–∏–º—Å—è!",
                callback_data=f"compote_confirm_{call.from_user.id}"
            ))
            
            await bot.send_message(
                ADMIN_ID,
                f"üå≥ –ö—Ç–æ-—Ç–æ —Ö–æ—á–µ—Ç –≤ –¥—Ä–æ–≤–∞!\n",
                reply_markup=builder.as_markup()
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ compote_handler: {e}")
        await call.answer("‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...")

@dp.callback_query(F.data == "bichis_shawarma")
async def shawarma_handler(call: types.CallbackQuery):
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —à–∞—É—Ä–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await call.message.answer_photo(
            FSInputFile(PHOTOS_DIR / 'shawarma.jpg'),
            caption="–ß–µ —Å–º–æ—Ç—Ä–∏—à—å? –û–¥–µ–≤–∞–π—Å—è, –∏–¥—ë–º –∑–∞ —à–∞–≤—É—Ö–æ–π.\n–û–ø–ª–∞—Ç–∞: 1 –æ–±–Ω–∏–º–∞—à–∫–∞ ü§ó",
            reply_markup=InlineKeyboardBuilder()
                .button(text="üçΩ –í –º–µ–Ω—é", callback_data="categories")
                .as_markup()
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        if ADMIN_ID:
            user = call.from_user
            await bot.send_message(
                ADMIN_ID,
                "ü•ô –ö—Ç–æ-—Ç–æ —Ö–æ—á–µ—Ç —à–∞–≤—É—Ö—É!"
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ shawarma_handler: {e}")
        await call.answer("‚ùå –®–∞—É—Ä–º–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å...")

@dp.callback_query(F.data == "bichis_shawarma")
async def shawarma_handler(call: types.CallbackQuery):
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —à–∞—É—Ä–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await call.message.answer_photo(
            FSInputFile(PHOTOS_DIR / 'shawarma.jpg'),
            caption="–ß–µ —Å–º–æ—Ç—Ä–∏—à—å? –û–¥–µ–≤–∞–π—Å—è, –∏–¥—ë–º –∑–∞ —à–∞–≤—É—Ö–æ–π.\n–û–ø–ª–∞—Ç–∞: 1 –æ–±–Ω–∏–º–∞—à–∫–∞ ü§ó",
            reply_markup=InlineKeyboardBuilder()
                .button(text="üçΩ –í –º–µ–Ω—é", callback_data="categories")
                .as_markup()
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É —Å –∫–Ω–æ–ø–∫–æ–π
        if ADMIN_ID:
            builder = InlineKeyboardBuilder()
            builder.add(types.InlineKeyboardButton(
                text="üü¢ –°–∏—Ñ–æ–æ–æ–æ–æ–Ω!",
                callback_data=f"bichis_confirm_{call.from_user.id}_shawarma"
            ))
            
            await bot.send_message(
                ADMIN_ID,
                f"ü•ô –ö—Ç–æ-—Ç–æ —Ö–æ—á–µ—Ç —à–∞–≤—É—Ö—É!\n",
                reply_markup=builder.as_markup()
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ shawarma_handler: {e}")
        await call.answer("‚ùå –®–∞—É—Ä–º–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å...")

@dp.callback_query(F.data == "bichis_doshik")
async def doshik_handler(call: types.CallbackQuery):
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ—à–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await call.message.answer_photo(
            FSInputFile(PHOTOS_DIR / 'doshik.jpg'),
            caption="–û–ø–ª–∞—Ç–∞: 1 –æ–±–Ω–∏–º–∞—à–∫–∞ ü§ó",
            reply_markup=InlineKeyboardBuilder()
                .button(text="üçΩ –í –º–µ–Ω—é", callback_data="categories")
                .as_markup()
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É —Å –∫–Ω–æ–ø–∫–æ–π
        if ADMIN_ID:
            builder = InlineKeyboardBuilder()
            builder.add(types.InlineKeyboardButton(
                text="üü¢ –°–∏—Ñ–æ–æ–æ–æ–æ–Ω!",
                callback_data=f"bichis_confirm_{call.from_user.id}_doshik"
            ))
            
            await bot.send_message(
                ADMIN_ID,
                f"üçú –ö—Ç–æ-—Ç–æ —Ö–æ—á–µ—Ç –¥–æ—à–∏–∫!\n",
                reply_markup=builder.as_markup()
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ doshik_handler: {e}")
        await call.answer("‚ùå –î–æ—à–∏–∫ —Ä–∞–∑–ª–∏–ª–∏...")

class BanquetStates(StatesGroup):
    waiting_for_guests = State()
    waiting_for_level = State()

@dp.callback_query(F.data == "banquet_continue")
async def start_banquet(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer(
        "–ß—Ç–æ–±—ã —è –º–æ–≥–ª–∞ –Ω–∞–∫–æ—Ä–º–∏—Ç—å –≥–æ—Å—Ç–µ–π, –Ω–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π:",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(BanquetStates.waiting_for_guests)

@dp.message(BanquetStates.waiting_for_guests)
async def process_guests_count(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return
    
    await state.update_data(guests_count=int(message.text))
    
    # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text="–ú–æ–∂–Ω–æ –∏ –ø–æ –¥–æ—à–∏–∫—É",
            callback_data="banquet_level_doshik"
        ),
        types.InlineKeyboardButton(
            text="–ù–æ—Ä–º –ø–æ –¥–æ–º–∞—à–Ω–µ–º—É",
            callback_data="banquet_level_home"
        )
    )
    builder.row(
        types.InlineKeyboardButton(
            text="–¢—è–∂–µ–ª—ã–π –ª—é–∫—Å",
            callback_data="banquet_level_lux"
        )
    )
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≥–æ—Ç–æ–≤–∫–∏:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(BanquetStates.waiting_for_level)

@dp.callback_query(F.data.startswith("banquet_level_"), BanquetStates.waiting_for_level)
async def process_level(call: types.CallbackQuery, state: FSMContext):
    level_mapping = {
        "banquet_level_doshik": "–ú–æ–∂–Ω–æ –∏ –ø–æ –¥–æ—à–∏–∫—É",
        "banquet_level_home": "–ù–æ—Ä–º –ø–æ –¥–æ–º–∞—à–Ω–µ–º—É",
        "banquet_level_lux": "–¢—è–∂–µ–ª—ã–π –ª—é–∫—Å"
    }
    
    level = level_mapping.get(call.data)
    if not level:
        await call.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏")
        return
    
    data = await state.get_data()
    guests_count = data['guests_count']
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏, —É–±–∏—Ä–∞—è –∏—Ö
    await call.message.edit_reply_markup(reply_markup=None)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await call.message.answer_photo(
        FSInputFile(PHOTOS_DIR / 'banquet.jpg'),
        caption=f"–ë–∞–Ω–∫–µ—Ç –Ω–∞ {guests_count} –≥–æ—Å—Ç–µ–π!\n–£—Ä–æ–≤–µ–Ω—å: {level}",
        reply_markup=InlineKeyboardBuilder()
            .button(text="üçΩ –í –º–µ–Ω—é", callback_data="categories")
            .as_markup()
    )
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    if ADMIN_ID:
        await bot.send_message(
            ADMIN_ID,
            f"üéâ –ê—Ö—Ç—É–Ω–≥! –ë–∞–Ω–∫–µ—Ç!\n\n"
            f"üë• –ì–æ—Å—Ç–µ–π: {guests_count}\n"
            f"‚ö° –£—Ä–æ–≤–µ–Ω—å: {level}"
        )
    
    await state.clear()

@dp.callback_query(F.data.startswith('item_'))
async def show_item_details(call: types.CallbackQuery):
    await call.answer()
    try:
        _, cat_id, item_id = call.data.split('_', 2)
        full_item_id = f"item_{item_id}" if not item_id.startswith('item_') else item_id
        
        if cat_id not in menu or full_item_id not in menu[cat_id]:
            await call.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
            
        item = menu[cat_id][full_item_id]
        
        text = f"""
<b>{item['name']}</b>
<i>{item['desc']}</i>
–¶–µ–Ω–∞: {item['price']} üíã
        """
        
        builder = InlineKeyboardBuilder()
        builder.row(
            types.InlineKeyboardButton(
                text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–∞–∑",
                callback_data=f"add_{cat_id}_{item_id}"
            ),
            types.InlineKeyboardButton(
                text="‚¨ÖÔ∏è –í –º–µ–Ω—é",
                callback_data="categories" 
            )
        )
        
        if item.get('photo'):
            photo_path = PHOTOS_DIR / item['photo']
            if photo_path.exists():
                await call.message.answer_photo(
                    FSInputFile(photo_path),
                    caption=text,
                    reply_markup=builder.as_markup(),
                    parse_mode=ParseMode.HTML
                )
                return
        
        await call.message.answer(
            text,
            reply_markup=builder.as_markup(),
            parse_mode=ParseMode.HTML
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ç–æ–≤–∞—Ä–∞: {e}")
        await call.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ", show_alert=True)

@dp.callback_query(F.data.startswith("add_"))
async def add_to_order(call: types.CallbackQuery):
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data (—Ñ–æ—Ä–º–∞—Ç: "add_–∫–∞—Ç–µ–≥–æ—Ä–∏—è_item_1753030014")
        parts = call.data.split('_', 3)  # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ 3 —á–∞—Å—Ç–∏
        if len(parts) < 3:
            await call.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)
            return

        cat_id = parts[1]
        item_id = f"item_{parts[2]}" if len(parts) == 3 else f"{parts[2]}_{parts[3]}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if cat_id not in menu:
            await call.answer(f"‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è {cat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        if item_id not in menu[cat_id]:
            await call.answer(f"‚ùå –¢–æ–≤–∞—Ä {item_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {cat_id}", show_alert=True)
            return

        item_data = menu[cat_id][item_id]
        user_id = str(call.from_user.id)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–∫–∞–∑
        if user_id not in active_orders:
            active_orders[user_id] = {'items': {}, 'created_at': datetime.now().isoformat()}

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
        if item_id not in active_orders[user_id]['items']:
            active_orders[user_id]['items'][item_id] = {
                'name': item_data['name'],
                'price': item_data['price'],
                'count': 1
            }
        else:
            active_orders[user_id]['items'][item_id]['count'] += 1

        save_db(menu, orders, active_orders)
        # await call.answer(f"‚úÖ {item_data['name']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–∫–∞–∑!")
        await call.answer(f"‚úÖ {item_data['name']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–∫–∞–∑!", show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {str(e)}", exc_info=True)
        await call.answer("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", show_alert=True)

@dp.callback_query(F.data == "my_order")
async def show_my_order(call: types.CallbackQuery, state: FSMContext = None):
    user_id = str(call.from_user.id)
    
    if user_id not in active_orders or not active_orders[user_id]['items']:
        await call.message.edit_text("üõí –í–∞—à –∑–∞–∫–∞–∑ –ø—É—Å—Ç!")
        return
    
    order = active_orders[user_id]
    total = 0
    items_text = []
    
    for item_id, item in order['items'].items():
        item_total = item['count'] * item['price']
        total += item_total
        items_text.append(f"‚ñ™ {item['name']} √ó{item['count']} = {item_total}üíã")
    
    text = "üõí *–í–∞—à –∑–∞–∫–∞–∑:*\n\n" + "\n".join(items_text) + f"\n\n*–ò—Ç–æ–≥–æ:* {total}üíã"
    
    builder = InlineKeyboardBuilder()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    builder.row(
        types.InlineKeyboardButton(
            text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å",
            callback_data="edit_order"
        ),
        types.InlineKeyboardButton(
            text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å",
            callback_data="confirm_order"
        )
    )
    
    # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
    builder.row(
        types.InlineKeyboardButton(
            text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É",
            callback_data="clear_cart"
        )
    )
    builder.row(
        types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
            callback_data="categories"
        )
    )
    
    try:
        await call.message.edit_text(
            text,
            reply_markup=builder.as_markup(),
            parse_mode="Markdown"
        )
    except Exception:
        await call.message.answer(
            text,
            reply_markup=builder.as_markup(),
            parse_mode="Markdown"
        )

@dp.callback_query(F.data == "clear_cart")
async def clear_cart_handler(call: types.CallbackQuery):
    user_id = str(call.from_user.id)
    
    if user_id in active_orders:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ø–∏—é –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        items_count = len(active_orders[user_id]['items'])
        active_orders[user_id]['items'] = {}  # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        save_db(menu, orders, active_orders)
        
        await call.answer(f"üóë –£–¥–∞–ª–µ–Ω–æ {items_count} –ø–æ–∑–∏—Ü–∏–π!")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        await show_categories(call)
    else:
        await call.answer("‚ùå –ö–æ—Ä–∑–∏–Ω–∞ —É–∂–µ –ø—É—Å—Ç–∞", show_alert=True)

@dp.callback_query(F.data == "confirm_order")
async def confirm_order_handler(call: types.CallbackQuery):
    user_id = str(call.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑
    if user_id not in active_orders or not active_orders[user_id]['items']:
        await call.answer("‚ùå –í–∞—à –∑–∞–∫–∞–∑ –ø—É—Å—Ç!", show_alert=True)
        return
    
    order = active_orders[user_id]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
    order_text = "üçΩ *–í–∞—à –∑–∞–∫–∞–∑:*\n\n"
    total = 0
    
    for item_id, item in order['items'].items():
        item_total = item['count'] * item['price']
        total += item_total
        order_text += f"‚ñ™ {item['name']} √ó{item['count']} = {item_total} üíã\n"
    
    order_text += f"\n*–ò—Ç–æ–≥–æ:* {total} üíã"
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
            callback_data="final_confirm"
        ),
        types.InlineKeyboardButton(
            text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å",
            callback_data="edit_order"
        )
    )
    
    await call.message.edit_text(
        order_text,
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )

@dp.callback_query(F.data == "final_confirm")
async def final_confirmation(call: types.CallbackQuery):
    user_id = str(call.from_user.id)
    
    if user_id not in active_orders:
        await call.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
    order = active_orders[user_id]
    order_text = "üçΩ *–í–∞—à –∑–∞–∫–∞–∑:*\n\n"
    total = 0
    
    for item_id, item in order['items'].items():
        item_total = item['count'] * item['price']
        total += item_total
        order_text += f"‚ñ™ {item['name']} √ó{item['count']} = {item_total} üíã\n"
    
    order_text += f"\n*–ò—Ç–æ–≥–æ:* {total} üíã"
    order_id = generate_order_id()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
    orders[order_id] = {
        'user_id': user_id,
        'items': order['items'],
        'created_at': datetime.now().isoformat(),
        'status': 'new'
    }
    active_orders.pop(user_id)
    save_db(menu, orders, active_orders)
    
    # –ü—É—Ç—å –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ
    photo_path = PHOTOS_DIR / 'bonapetit.jpg'
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
    await call.message.delete()  # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await call.message.answer_photo(
        FSInputFile(photo_path),
        caption="üíù *–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!*\n\n" +
               order_text +
               "\n\n–®–µ—Ñ-–ø–æ–≤–∞—Ä —É–∂–µ –±–µ–∂–∏—Ç –Ω–∞ –∫—É—Ö–Ω—é...",
        parse_mode="Markdown"
    )
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É —Å –∫–Ω–æ–ø–∫–æ–π
    if ADMIN_ID:
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(
            text="‚úÖ –ì–æ—Ç–æ–≤–æ",
            callback_data=f"order_done_{order_id}"
        ))
        
        await bot.send_message(
            ADMIN_ID,
            f"üì¶ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç –õ—é–±–∏–º–∫–∏*\n" +
            order_text,
            parse_mode="Markdown",
            reply_markup=builder.as_markup()
        )

@dp.callback_query(F.data == "edit_order")
async def edit_order_handler(call: types.CallbackQuery):
    user_id = str(call.from_user.id)
    
    if user_id not in active_orders or not active_orders[user_id]['items']:
        await call.answer("‚ùå –ó–∞–∫–∞–∑ –ø—É—Å—Ç!", show_alert=True)
        return
    
    builder = InlineKeyboardBuilder()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π
    for item_id, item in active_orders[user_id]['items'].items():
        builder.add(types.InlineKeyboardButton(
            text=f"‚ùå –£–¥–∞–ª–∏—Ç—å {item['name']} (√ó{item['count']})",
            callback_data=f"remove_{item_id}"  # –í–∞–∂–Ω–æ: –ø–µ—Ä–µ–¥–∞—ë–º –ø–æ–ª–Ω—ã–π item_id
        ))
    
    builder.adjust(1)
    builder.row(
        types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑—É",
            callback_data="my_order"
        )
    )
    
    await call.message.edit_text(
        "‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:*\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )

@dp.callback_query(F.data.startswith("remove_"))
async def remove_item_handler(call: types.CallbackQuery, state: FSMContext):
    user_id = str(call.from_user.id)
    full_item_id = call.data.split('_', 1)[1]
    
    if user_id not in active_orders:
        await call.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    if full_item_id not in active_orders[user_id]['items']:
        await call.answer("‚ùå –ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∑–∞–∫–∞–∑–µ!", show_alert=True)
        return
    
    # –£–¥–∞–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
    item_name = active_orders[user_id]['items'][full_item_id]['name']
    del active_orders[user_id]['items'][full_item_id]
    save_db(menu, orders, active_orders)
    
    await call.answer(f"‚ùå {item_name} —É–¥–∞–ª—ë–Ω –∏–∑ –∑–∞–∫–∞–∑–∞!")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∑–∞–∫–∞–∑–∞ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π state
    await show_my_order(call, state)


# ====================== –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ======================

async def admin_panel(message: types.Message, state: FSMContext):
    await state.clear()
    kb = [
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é")],
        [KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é")]
    ]
    markup = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await message.answer("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=markup)
    await state.set_state(MenuStates.admin_panel)

@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é", MenuStates.admin_panel)
async def admin_add_item(message: types.Message, state: FSMContext):
    builder = InlineKeyboardBuilder()
    for cat_id, cat_name in CATEGORIES.items():
        if cat_id not in UNEDITABLE_CATEGORIES:
            builder.add(types.InlineKeyboardButton(
                text=cat_name,
                callback_data=f"admin_add_to_{cat_id}"
            ))
    builder.adjust(2)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=builder.as_markup())

@dp.callback_query(F.data.startswith("admin_add_to_"))
async def process_add_category(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    try:
        cat_id = call.data.replace("admin_add_to_", "")
        
        if cat_id not in CATEGORIES:
            available = ", ".join(f"'{cat}'" for cat in CATEGORIES.keys())
            await call.message.answer(f"‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{cat_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {available}")
            return
        
        await state.update_data(category=cat_id)
        await call.message.answer(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {CATEGORIES[cat_id]}\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏:",
        )
        await state.set_state(AdminStates.add_item_name)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await call.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        await state.clear()

@dp.message(AdminStates.add_item_name)
async def process_item_name(message: types.Message, state: FSMContext):
    if len(message.text) > 100:
        await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–º–∞–∫—Å. 100 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏:")
    await state.set_state(AdminStates.add_item_desc)

@dp.message(AdminStates.add_item_desc)
async def process_item_desc(message: types.Message, state: FSMContext):
    if len(message.text) > 500:
        await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–º–∞–∫—Å. 500 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    
    await state.update_data(desc=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø–æ–∑–∏—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")
    await state.set_state(AdminStates.add_item_price)

@dp.message(AdminStates.add_item_price)
async def process_item_price(message: types.Message, state: FSMContext):
    try:
        price = int(message.text)
        if price <= 0:
            raise ValueError
        await state.update_data(price=price)
        await message.answer(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±–ª—é–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]],
                resize_keyboard=True
            )
        )
        await state.set_state(AdminStates.add_item_photo)
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)")

@dp.message(AdminStates.add_item_photo, F.photo)
async def process_item_photo_with_photo(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        cat_id = data['category']
        item_id = f"item_{int(time.time())}"
        
        photo = message.photo[-1]
        file = await bot.get_file(photo.file_id)
        
        ext = file.file_path.split('.')[-1] if '.' in file.file_path else 'jpg'
        photo_name = f"{cat_id}_{item_id}.{ext}"
        photo_path = PHOTOS_DIR / photo_name
        
        await bot.download_file(file.file_path, photo_path)
        
        menu[cat_id][item_id] = {
            'name': data['name'],
            'desc': data['desc'],
            'price': int(data['price']),
            'photo': photo_name
        }
        save_db(menu, orders, active_orders)
        
        await message.answer_photo(
            photo.file_id,
            caption=f"‚úÖ {data['name']} –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n–¶–µ–Ω–∞: {data['price']} üíã",
            reply_markup=ReplyKeyboardRemove()
        )
        await admin_panel(message, state)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        await admin_panel(message, state)

@dp.message(AdminStates.add_item_photo, F.text.casefold() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def process_item_photo_without_photo(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        cat_id = data['category']
        item_id = f"item_{int(time.time())}"
        
        menu[cat_id][item_id] = {
            'name': data['name'],
            'desc': data['desc'],
            'price': int(data['price']),
            'photo': None
        }
        save_db(menu, orders, active_orders)
        
        await message.answer(
            f"‚úÖ {data['name']} –¥–æ–±–∞–≤–ª–µ–Ω–æ –±–µ–∑ —Ñ–æ—Ç–æ!\n–¶–µ–Ω–∞: {data['price']} üíã",
            reply_markup=ReplyKeyboardRemove()
        )
        await admin_panel(message, state)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        await admin_panel(message, state)

@dp.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é", MenuStates.admin_panel)
async def admin_delete_item(message: types.Message, state: FSMContext):
    try:
        all_items = []
        for cat_id, items in menu.items():
            if cat_id in UNEDITABLE_CATEGORIES:
                continue
            for item_id, item in items.items():
                all_items.append((cat_id, item_id, item['name']))
        
        if not all_items:
            await message.answer("‚ÑπÔ∏è –ù–µ—Ç –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        builder = InlineKeyboardBuilder()
        for cat_id, item_id, item_name in all_items:
            builder.add(types.InlineKeyboardButton(
                text=f"{CATEGORIES[cat_id]}: {item_name}",
                callback_data=f"delete_item_{cat_id}_{item_id}"
            ))
        builder.adjust(1)
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=builder.as_markup()
        )
        await state.set_state(AdminStates.delete_item)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        await admin_panel(message, state)

@dp.callback_query(F.data.startswith("delete_item_"), AdminStates.delete_item)
async def process_delete_item(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    try:
        parts = call.data.split('_')
        if len(parts) < 4:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data")
            
        cat_id = parts[2]
        item_id = '_'.join(parts[3:])
        
        if cat_id not in menu or item_id not in menu[cat_id]:
            await call.answer("‚ùå –ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        item_name = menu[cat_id][item_id]['name']
        
        if menu[cat_id][item_id].get('photo'):
            photo_path = PHOTOS_DIR / menu[cat_id][item_id]['photo']
            try:
                if photo_path.exists():
                    photo_path.unlink()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ: {e}")
        
        del menu[cat_id][item_id]
        save_db(menu, orders, active_orders)
        
        await call.message.answer(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è '{item_name}' —É–¥–∞–ª–µ–Ω–∞")
        await admin_panel(call.message, state)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await call.message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        await admin_panel(call.message, state)

@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞", StateFilter("*"))
async def cancel_handler(message: types.Message, state: FSMContext):
    await state.clear()
    if message.from_user.id == ADMIN_ID:
        await admin_panel(message, state)
    else:
        await show_user_menu(message)

@dp.callback_query(F.data.startswith("order_done_"))
async def mark_order_done(call: types.CallbackQuery):
    order_id = call.data.split('_')[2]
    
    if order_id not in orders:
        await call.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    orders[order_id]['status'] = 'done'
    orders[order_id]['completed_at'] = datetime.now().isoformat()
    save_db(menu, orders, active_orders)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = orders[order_id]['user_id']
    order_items = orders[order_id]['items']
    
    items_text = "\n".join(
        f"‚ñ™ {item['name']} √ó{item['count']}" 
        for item in order_items.values()
    )
    
    try:
        await bot.send_message(
            user_id,
            f"üéâ *–í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤!*\n\n" +
            items_text +
            "\n\n–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞! üíã",
            parse_mode="Markdown"
        )
        await call.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª—ë–Ω")
    except Exception as e:
        await call.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    await call.message.edit_text(
        f"‚úÖ –ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω\n" +
        call.message.text,
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–≥–Ω–∞–ª–∏" —É –∞–¥–º–∏–Ω–∞
@dp.callback_query(F.data.startswith("outdoor_confirm_"))
async def outdoor_confirmation(call: types.CallbackQuery):
    await call.answer()
    user_id = int(call.data.split('_')[2])
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(
            user_id,
            "üéâ –®–µ—Ñ-–ø–æ–≤–∞—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª - –ø–æ–≥–Ω–∞–ª–∏ –ø–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º! üöóüí®"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        await call.message.edit_text(
            f"‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø–æ—Ö–æ–¥ –ø–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º\n"
            f"{call.message.text}",
            reply_markup=None
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ—Ö–æ–¥–∞ –ø–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º: {e}")
        await call.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")

@dp.callback_query(F.data.startswith("delivery_confirm_"))
async def confirm_delivery(call: types.CallbackQuery):
    try:
        await call.answer()
        user_id = int(call.data.split('_')[2])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(
            user_id,
            "üöÄ –£—Ä–∞, –Ω–µ –≥–æ—Ç–æ–≤–∏—Ç—å!"
        )
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
        await call.message.edit_text(
            f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {call.message.text}",
            reply_markup=None
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏: {e}")
        await call.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
@dp.callback_query(F.data.startswith("compote_confirm_"))
async def confirm_compote(call: types.CallbackQuery):
    try:
        await call.answer()
        user_id = int(call.data.split('_')[2])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(
            user_id,
            "üçæ –ì–æ –∫–≤–∞—Å–∏—Ç—å! üçª"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
        await call.message.edit_text(
            f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {call.message.text}\n"
            f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
            reply_markup=None
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
        await call.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", show_alert=True)

# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –±–∏—á–∏-–º–µ–Ω—é
@dp.callback_query(F.data.startswith("bichis_confirm_"))
async def confirm_bichis(call: types.CallbackQuery):
    try:
        await call.answer()
        _, _, user_id, item_type = call.data.split('_')
        user_id = int(user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(
            user_id,
            "üöÄ –°–∏—Ñ–æ–æ–æ–æ–Ω! " + ("–®–∞–≤—É—Ö–∞ —É–∂–µ –≤ –ø—É—Ç–∏!" if item_type == "shawarma" else "–î–æ—à–∏–∫ –∑–∞–º–∞—á–∏–≤–∞–µ—Ç—Å—è!")
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
        await call.message.edit_text(
            f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {call.message.text}\n"
            f"–¢–∏–ø: {'–®–∞—É—Ä–º–∞' if item_type == 'shawarma' else '–î–æ—à–∏–∫'}",
            reply_markup=None
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
        await call.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", show_alert=True)

# ====================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ======================

async def on_startup(bot: Bot):
    init_folders()
    await bot.send_message(ADMIN_ID, "ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

if __name__ == '__main__':
    dp.startup.register(on_startup)
    dp.run_polling(bot)