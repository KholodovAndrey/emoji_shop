import os
import json
import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.types import FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton
from aiogram.enums import ParseMode
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
ADMIN_ID = int(os.getenv('ADMIN_ID'))

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–ø–∫–∏ –¥–∞–Ω–Ω—ã—Ö
def init_data_folder():
    os.makedirs('data/photos', exist_ok=True)
    for file in ['menu.json', 'orders.json', 'active_orders.json']:
        if not os.path.exists(f'data/{file}'):
            with open(f'data/{file}', 'w') as f:
                json.dump({}, f)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class MenuStates(StatesGroup):
    main_menu = State()
    view_item = State()
    my_order = State()
    edit_order = State()
    admin_panel = State()

class AdminStates(StatesGroup):
    add_item_name = State()
    add_item_desc = State()
    add_item_price = State()
    add_item_time = State()
    add_item_photo = State()
    edit_item_select = State()
    edit_item_field = State()
    edit_item_value = State()

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
def load_db():
    init_data_folder()
    try:
        with open('data/menu.json', 'r') as f:
            menu = json.load(f)
    except:
        menu = {}
    
    try:
        with open('data/orders.json', 'r') as f:
            orders = json.load(f)
    except:
        orders = {}
    
    try:
        with open('data/active_orders.json', 'r') as f:
            active_orders = json.load(f)
    except:
        active_orders = {}
    
    return menu, orders, active_orders

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def save_db(menu, orders, active_orders):
    init_data_folder()
    with open('data/menu.json', 'w') as f:
        json.dump(menu, f)
    with open('data/orders.json', 'w') as f:
        json.dump(orders, f)
    with open('data/active_orders.json', 'w') as f:
        json.dump(active_orders, f)

menu, orders, active_orders = load_db()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º
async def delete_with_effect(message: types.Message, delay: float = 0.5):
    try:
        await asyncio.sleep(delay)
        await message.delete()
    except:
        pass

# –•—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.message(F.text == '/start')
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    
    welcome_text = (
        "üçï –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ —à—É—Ç–æ—á–Ω–æ–µ –∫–∞—Ñ–µ '–õ—é–±–∏–º–∫–∞'! üêæ\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —Å–∞–º—ã–µ –Ω–µ–æ–±—ã—á–Ω—ã–µ –±–ª—é–¥–∞ –∑–∞ —É—Å–ª–æ–≤–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã —Ö–æ—Ä–æ—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è!\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ú–µ–Ω—é' –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."
    )
    
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="üçΩ –ú–µ–Ω—é",
        callback_data="menu"
    ))
    
    msg = await message.answer(welcome_text, reply_markup=builder.as_markup())
    asyncio.create_task(delete_with_effect(msg, 10))

@dp.callback_query(F.data == "menu")
async def show_menu(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    try:
        await call.message.delete()
    except:
        pass
    
    if not menu:
        msg = await call.message.answer("–ú–µ–Ω—é –ø–æ–∫–∞ –ø—É—Å—Ç–æ–µ. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ –µ–≥–æ –∑–∞–ø–æ–ª–Ω–∏—Ç!")
        asyncio.create_task(delete_with_effect(msg, 5))
        return
    
    builder = InlineKeyboardBuilder()
    for item_id, item in menu.items():
        builder.add(types.InlineKeyboardButton(
            text=item['name'],
            callback_data=f"item_{item_id}"
        ))
    builder.adjust(2)
    
    builder.row(types.InlineKeyboardButton(
        text="üõí –ú–æ–π –∑–∞–∫–∞–∑",
        callback_data="my_order"
    ))
    
    await call.message.answer("üçΩ –ù–∞—à–µ –º–µ–Ω—é:", reply_markup=builder.as_markup())
    await state.set_state(MenuStates.main_menu)

@dp.callback_query(F.data.startswith('item_'))
async def show_item(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    try:
        await call.message.delete()
    except:
        pass
    
    item_id = call.data.split('_')[1]
    item = menu[item_id]
    
    text = (
        f"üçΩ <b>{item['name']}</b>\n\n"
        f"{item['desc']}\n\n"
        f"‚è≥ –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: {item['time']}\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {item['price']} —É—Å–ª–æ–≤–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü"
    )
    
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–∞–∑",
        callback_data=f"add_{item_id}"
    ))
    builder.row(
        types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data="menu"
        ),
        types.InlineKeyboardButton(
            text="üõí –ú–æ–π –∑–∞–∫–∞–∑",
            callback_data="my_order"
        )
    )
    
    photo = FSInputFile(item['photo'])
    await call.message.answer_photo(
        photo,
        caption=text,
        reply_markup=builder.as_markup(),
        parse_mode=ParseMode.HTML
    )
    
    await state.set_state(MenuStates.view_item)
    await state.update_data(current_item=item_id)

@dp.callback_query(F.data.startswith('add_'))
async def add_to_order(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    
    item_id = call.data.split('_')[1]
    user_id = call.from_user.id
    item = menu[item_id]
    
    if str(user_id) not in orders:
        orders[str(user_id)] = []
    
    orders[str(user_id)].append({
        'id': item_id,
        'name': item['name'],
        'price': item['price']
    })
    save_db(menu, orders, active_orders)
    
    msg = await call.message.answer(f"‚úÖ {item['name']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à –∑–∞–∫–∞–∑!")
    asyncio.create_task(delete_with_effect(msg, 3))

@dp.callback_query(F.data == "my_order")
async def show_order(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    try:
        await call.message.delete()
    except:
        pass
    
    user_id = call.from_user.id
    order = orders.get(str(user_id), [])
    
    if not order:
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(
            text="üçΩ –ú–µ–Ω—é",
            callback_data="menu"
        ))
        msg = await call.message.answer("–í–∞—à –∑–∞–∫–∞–∑ –ø—É—Å—Ç.", reply_markup=builder.as_markup())
        asyncio.create_task(delete_with_effect(msg, 5))
        await state.set_state(MenuStates.main_menu)
        return
    
    order_text = "üõí –í–∞—à –∑–∞–∫–∞–∑:\n\n"
    for idx, item in enumerate(order, 1):
        order_text += f"{idx}. {item['name']} - {item['price']} —É—Å–ª. –µ–¥.\n"
    
    total = sum(item['price'] for item in order)
    order_text += f"\nüíµ –ò—Ç–æ–≥–æ: {total} —É—Å–ª–æ–≤–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü"
    
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data="menu"
        ),
        types.InlineKeyboardButton(
            text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
            callback_data="edit_order"
        )
    )
    builder.add(types.InlineKeyboardButton(
        text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑",
        callback_data="place_order"
    ))
    
    await call.message.answer(order_text, reply_markup=builder.as_markup())
    await state.set_state(MenuStates.my_order)

@dp.callback_query(F.data == "edit_order")
async def edit_order(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    try:
        await call.message.delete()
    except:
        pass
    
    user_id = call.from_user.id
    order = orders.get(str(user_id), [])
    
    if not order:
        msg = await call.message.answer("–í–∞—à –∑–∞–∫–∞–∑ –ø—É—Å—Ç.")
        asyncio.create_task(delete_with_effect(msg, 3))
        await state.set_state(MenuStates.main_menu)
        return
    
    order_text = "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:\n\n"
    for idx, item in enumerate(order, 1):
        order_text += f"{idx}. {item['name']} - {item['price']} —É—Å–ª. –µ–¥.\n"
    
    builder = InlineKeyboardBuilder()
    for idx, item in enumerate(order, 1):
        builder.add(types.InlineKeyboardButton(
            text=f"‚ùå –£–¥–∞–ª–∏—Ç—å {item['name']}",
            callback_data=f"remove_{idx-1}"
        ))
    
    builder.row(types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data="my_order"
    ))
    
    await call.message.answer(order_text, reply_markup=builder.as_markup())
    await state.set_state(MenuStates.edit_order)

@dp.callback_query(F.data.startswith('remove_'))
async def remove_from_order(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    
    item_idx = int(call.data.split('_')[1])
    user_id = call.from_user.id
    
    if str(user_id) in orders and 0 <= item_idx < len(orders[str(user_id)]):
        removed_item = orders[str(user_id)].pop(item_idx)
        save_db(menu, orders, active_orders)
        msg = await call.message.answer(f"‚ùå {removed_item['name']} —É–¥–∞–ª–µ–Ω –∏–∑ –∑–∞–∫–∞–∑–∞.")
        asyncio.create_task(delete_with_effect(msg, 3))
    
    if not orders.get(str(user_id), []):
        msg = await call.message.answer("–í–∞—à –∑–∞–∫–∞–∑ —Ç–µ–ø–µ—Ä—å –ø—É—Å—Ç.")
        asyncio.create_task(delete_with_effect(msg, 3))
        await state.set_state(MenuStates.main_menu)
        return
    
    await edit_order(call, state)

@dp.callback_query(F.data == "place_order")
async def place_order(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    try:
        await call.message.delete()
    except:
        pass
    
    user_id = call.from_user.id
    order = orders.get(str(user_id), [])
    
    if not order:
        msg = await call.message.answer("–í–∞—à –∑–∞–∫–∞–∑ –ø—É—Å—Ç!")
        asyncio.create_task(delete_with_effect(msg, 3))
        return
    
    total = sum(item['price'] for item in order)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –∑–∞–∫–∞–∑–∞
    order_id = str(max([int(k) for k in active_orders.keys()] + [0]) + 1) if active_orders else "1"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö
    active_orders[order_id] = {
        'user_id': user_id,
        'username': call.from_user.username or call.from_user.full_name,
        'time': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        'total': total,
        'items': order.copy()
    }
    
    orders[str(user_id)] = []
    save_db(menu, orders, active_orders)
    
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="üçΩ –ú–µ–Ω—é",
        callback_data="menu"
    ))
    
    msg = await call.message.answer(
        f"üéâ –í–∞—à –∑–∞–∫–∞–∑ #{order_id} –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ò—Ç–æ–≥–æ: {total} —É—Å–ª–æ–≤–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü.\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏.",
        reply_markup=builder.as_markup()
    )
    asyncio.create_task(delete_with_effect(msg, 10))
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    order_text = f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id} –æ—Ç @{call.from_user.username or call.from_user.full_name}:\n\n"
    for item in order:
        order_text += f"- {item['name']} ({item['price']} —É—Å–ª. –µ–¥.)\n"
    order_text += f"\nüíµ –ò—Ç–æ–≥–æ: {total} —É—Å–ª–æ–≤–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü\n"
    order_text += f"\n–ù–∞–ø–∏—à–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ {order_id}', –∫–æ–≥–¥–∞ –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤"
    
    await bot.send_message(ADMIN_ID, order_text)
    
    await state.set_state(MenuStates.main_menu)

# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
@dp.message(F.text == '/admin')
async def admin_panel(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        msg = await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        asyncio.create_task(delete_with_effect(msg, 3))
        return
    
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é"))
    builder.add(KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é"))
    builder.add(KeyboardButton(text="üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã"))
    builder.adjust(2)
    
    await message.answer(
        "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )
    await state.set_state(MenuStates.admin_panel)

@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é", MenuStates.admin_panel)
async def admin_add_item(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏:", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(AdminStates.add_item_name)

@dp.message(AdminStates.add_item_name)
async def process_item_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏:")
    await state.set_state(AdminStates.add_item_desc)

@dp.message(AdminStates.add_item_desc)
async def process_item_desc(message: types.Message, state: FSMContext):
    await state.update_data(desc=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏ (–≤ —É—Å–ª–æ–≤–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö):")
    await state.set_state(AdminStates.add_item_price)

@dp.message(AdminStates.add_item_price)
async def process_item_price(message: types.Message, state: FSMContext):
    try:
        price = int(message.text)
        await state.update_data(price=price)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '10-15 –º–∏–Ω—É—Ç'):")
        await state.set_state(AdminStates.add_item_time)
    except ValueError:
        msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        asyncio.create_task(delete_with_effect(msg, 3))

@dp.message(AdminStates.add_item_time)
async def process_item_time(message: types.Message, state: FSMContext):
    await state.update_data(time=message.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏:")
    await state.set_state(AdminStates.add_item_photo)

@dp.message(AdminStates.add_item_photo, F.photo)
async def process_item_photo(message: types.Message, state: FSMContext):
    photo = message.photo[-1]
    data = await state.get_data()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
    item_id = str(len(menu) + 1)
    photo_path = f"data/photos/menu_{item_id}.jpg"
    await bot.download(photo, destination=photo_path)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –º–µ–Ω—é
    menu[item_id] = {
        'name': data['name'],
        'desc': data['desc'],
        'price': data['price'],
        'time': data['time'],
        'photo': photo_path
    }
    save_db(menu, orders, active_orders)
    
    msg = await message.answer(
        f"–ü–æ–∑–∏—Ü–∏—è '{data['name']}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –º–µ–Ω—é!",
        reply_markup=types.ReplyKeyboardRemove()
    )
    asyncio.create_task(delete_with_effect(msg, 5))
    await state.clear()
    await admin_panel(message, state)

@dp.message(F.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é", MenuStates.admin_panel)
async def admin_edit_item(message: types.Message, state: FSMContext):
    if not menu:
        msg = await message.answer("–ú–µ–Ω—é –ø—É—Å—Ç–æ–µ, –Ω–µ—á–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.", reply_markup=types.ReplyKeyboardRemove())
        asyncio.create_task(delete_with_effect(msg, 3))
        return
    
    builder = InlineKeyboardBuilder()
    for item_id, item in menu.items():
        builder.add(types.InlineKeyboardButton(
            text=item['name'],
            callback_data=f"admin_edit_{item_id}"
        ))
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(AdminStates.edit_item_select)

@dp.callback_query(F.data.startswith('admin_edit_'), AdminStates.edit_item_select)
async def admin_edit_item_select(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    try:
        await call.message.delete()
    except:
        pass
    
    item_id = call.data.split('_')[2]
    item = menu[item_id]
    
    await state.update_data(edit_item_id=item_id)
    
    text = (
        f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {item['name']}\n\n"
        f"1. –ù–∞–∑–≤–∞–Ω–∏–µ: {item['name']}\n"
        f"2. –û–ø–∏—Å–∞–Ω–∏–µ: {item['desc']}\n"
        f"3. –¶–µ–Ω–∞: {item['price']}\n"
        f"4. –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: {item['time']}\n"
        f"5. –§–æ—Ç–æ: {item['photo']}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
    )
    
    await call.message.answer(text, reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(AdminStates.edit_item_field)

@dp.message(AdminStates.edit_item_field)
async def admin_edit_item_field(message: types.Message, state: FSMContext):
    try:
        field_num = int(message.text)
        if 1 <= field_num <= 5:
            fields = ['name', 'desc', 'price', 'time', 'photo']
            await state.update_data(edit_field=fields[field_num-1])
            
            if field_num == 5:
                await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ:")
            else:
                await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {fields[field_num-1]}:")
            
            await state.set_state(AdminStates.edit_item_value)
        else:
            msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5:")
            asyncio.create_task(delete_with_effect(msg, 3))
    except ValueError:
        msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        asyncio.create_task(delete_with_effect(msg, 3))

@dp.message(AdminStates.edit_item_value)
async def admin_edit_item_value(message: types.Message, state: FSMContext):
    data = await state.get_data()
    item_id = data['edit_item_id']
    field = data['edit_field']
    
    if field == 'photo' and message.photo:
        photo = message.photo[-1]
        photo_path = f"data/photos/menu_{item_id}.jpg"
        await bot.download(photo, destination=photo_path)
        menu[item_id]['photo'] = photo_path
    elif field != 'photo' and message.text:
        if field == 'price':
            try:
                menu[item_id][field] = int(message.text)
            except ValueError:
                msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
                asyncio.create_task(delete_with_effect(msg, 3))
                return
        else:
            menu[item_id][field] = message.text
    
    save_db(menu, orders, active_orders)
    msg = await message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    asyncio.create_task(delete_with_effect(msg, 3))
    await state.clear()
    await admin_panel(message, state)

@dp.message(F.text == "üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã", MenuStates.admin_panel)
async def show_active_orders(message: types.Message):
    if not active_orders:
        msg = await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤", reply_markup=types.ReplyKeyboardRemove())
        asyncio.create_task(delete_with_effect(msg, 3))
        return
    
    text = "üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:\n\n"
    for order_id, order_data in active_orders.items():
        text += f"üîπ –ó–∞–∫–∞–∑ #{order_id}\n"
        text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{order_data['username']}\n"
        text += f"üìÖ –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: {order_data['time']}\n"
        text += f"üíµ –°—É–º–º–∞: {order_data['total']} —É—Å–ª. –µ–¥.\n"
        text += "üçΩ –°–æ—Å—Ç–∞–≤:\n"
        for item in order_data['items']:
            text += f"- {item['name']} ({item['price']} —É—Å–ª. –µ–¥.)\n"
        text += "\n"
    
    await message.answer(text, reply_markup=types.ReplyKeyboardRemove())

@dp.message(F.text.startswith("–ì–æ—Ç–æ–≤–æ "), MenuStates.admin_panel)
async def order_ready(message: types.Message):
    try:
        order_id = message.text.split()[1]
        if order_id in active_orders:
            user_id = active_orders[order_id]['user_id']
            await bot.send_message(
                user_id,
                f"üéâ –í–∞—à –∑–∞–∫–∞–∑ #{order_id} –≥–æ—Ç–æ–≤! –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞! üòä"
            )
            
            msg = await message.answer(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}")
            asyncio.create_task(delete_with_effect(msg, 3))
            
            del active_orders[order_id]
            save_db(menu, orders, active_orders)
        else:
            msg = await message.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            asyncio.create_task(delete_with_effect(msg, 3))
    except Exception as e:
        msg = await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
        asyncio.create_task(delete_with_effect(msg, 3))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def on_startup(bot: Bot):
    init_data_folder()
    try:
        await bot.send_message(ADMIN_ID, "ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

if __name__ == '__main__':
    dp.startup.register(on_startup)
    dp.run_polling(bot)